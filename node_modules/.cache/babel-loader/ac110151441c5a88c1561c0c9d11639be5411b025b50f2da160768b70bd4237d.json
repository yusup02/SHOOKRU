{"ast":null,"code":"var _jsxFileName = \"/Users/ymmirzayev/shookru/src/App.js\",\n  _s = $RefreshSig$();\nimport './index.css';\nimport logo from './logo.svg';\nimport { useState } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginForm() {\n  _s();\n  //Здесь мы наблюдаем состояние хуков имени пользователя, пароля и ошибки, используя useState библиотеки из React.\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  //Функция handleSubmit вызвался при отправке формы.\n  // Она сначала отменяет действие по умолчанию (обновление страницы) с помощью метода preventDefault().\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setError('');\n\n    //Затем мы отправляем запрос POST на указанный адрес, используя fetch.\n    // В телезапросе мы отправляем JSON, запрашиваем имя пользователя и пароль, которые были введены в форме.\n    try {\n      // const response = await fetch('https://fp-services.ru/installment/login2', {\n      //   method: 'POST',\n      //   headers: {\n      //     \"Content-type\": \"application/json; charset=UTF-8\"\n      //   },\n      //   body: {\n      //     \"login\": \"login\",\n      //     \"password\": \"password\"\n      //   }\n\n      // });\n\n      const response = await fetch(\"https://fp-services.ru/installment/users/login\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          Login: username,\n          Password: password\n        }),\n        headers: {\n          'Access-Control-Allow-Origin': 'null',\n          \"Content-type\": \"application/json\"\n        }\n      });\n\n      //Если ответ сервера содержит код 200, то авторизация прошла успешно и мы перешли на страницу \"sert.html\".\n      // В случае если мы обработаем сообщение об ошибке.\n      if (response.ok) {\n        // Авторизация прошла успешно, переходим на следующую страницу\n        // window.location.href = './main.html';\n\n        const data = await response.json();\n        localStorage.setItem('userName', data.Data.Name);\n        localStorage.setItem('token', data.Data.Token);\n        const userName = localStorage.getItem('userName');\n        const token = localStorage.getItem('token');\n        console.log(\"Данные из памяти \" + token);\n\n        // window.location.href = './main.html';\n\n        const root = ReactDOM.createRoot(document.getElementById('root'));\n        root.render( /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this));\n        reportWebVitals();\n      } else {\n        // Обрабатываем ошибку авторизации\n        const errorData = await response.json();\n        setError(errorData.error);\n        console.error('Ошибка авторизации:', errorData.Error);\n        alert('Произошла ошибка при авторизации\\n' + errorData.Error);\n      }\n\n      //Если возникла какая-либо ошибка при выполнении запроса,\n      // то мы выводим сообщение об оплате в консоль и включает значение ошибки состояния.\n    } catch (error) {\n      console.error('Ошибка авторизации:', error);\n      setError('Произошла ошибка при авторизации');\n      alert('Произошла ошибка при авторизации');\n    }\n  };\n\n  //Возвращаемые элементы JSX имеют формы input, button и div, которые имеют классы CSS.\n  // Обратите внимание, что значение каждого входа связано с соответствующим состоянием хуком.\n  // Если в состоянии хуке ошибка есть сообщение об этом, то мы выводим его на страницу.\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text\",\n      children: \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"inpu login\",\n      type: \"text\",\n      placeholder: \"\\u041B\\u043E\\u0433\\u0438\\u043D\",\n      value: username,\n      onChange: event => setUsername(event.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"inpu password\",\n      type: \"password\",\n      placeholder: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n      value: password,\n      onChange: event => setPassword(event.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"\\u0412\\u043E\\u0439\\u0442\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginForm, \"lABZ+K3zbnEaFQvlduiFXLNOf5A=\");\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["logo","useState","ReactDOM","jsxDEV","_jsxDEV","LoginForm","_s","username","setUsername","password","setPassword","error","setError","handleSubmit","event","preventDefault","response","fetch","method","body","JSON","stringify","Login","Password","headers","ok","data","json","localStorage","setItem","Data","Name","Token","userName","getItem","token","console","log","root","createRoot","document","getElementById","render","Main","fileName","_jsxFileName","lineNumber","columnNumber","reportWebVitals","errorData","Error","alert","onSubmit","className","children","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["/Users/ymmirzayev/shookru/src/App.js"],"sourcesContent":["\nimport './index.css';\nimport logo from './logo.svg';\nimport { useState } from 'react';\nimport ReactDOM from 'react-dom/client';\n\n\n\nfunction LoginForm() {\n\n  //Здесь мы наблюдаем состояние хуков имени пользователя, пароля и ошибки, используя useState библиотеки из React.\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  //Функция handleSubmit вызвался при отправке формы.\n  // Она сначала отменяет действие по умолчанию (обновление страницы) с помощью метода preventDefault().\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setError('');\n\n    //Затем мы отправляем запрос POST на указанный адрес, используя fetch.\n    // В телезапросе мы отправляем JSON, запрашиваем имя пользователя и пароль, которые были введены в форме.\n    try {\n    \n      // const response = await fetch('https://fp-services.ru/installment/login2', {\n      //   method: 'POST',\n      //   headers: {\n      //     \"Content-type\": \"application/json; charset=UTF-8\"\n      //   },\n      //   body: {\n      //     \"login\": \"login\",\n      //     \"password\": \"password\"\n      //   }\n\n\n      // });\n\nconst response = await fetch(\"https://fp-services.ru/installment/users/login\", {\n  method: \"POST\",\n  body: JSON.stringify({\n    Login: username,\n    Password: password\n  }),\n  headers: {\n    'Access-Control-Allow-Origin': 'null',\n    \"Content-type\": \"application/json\"\n  }\n});\n      \n\n      //Если ответ сервера содержит код 200, то авторизация прошла успешно и мы перешли на страницу \"sert.html\".\n      // В случае если мы обработаем сообщение об ошибке.\n      if (response.ok) {\n        // Авторизация прошла успешно, переходим на следующую страницу\n        // window.location.href = './main.html';\n\n        const data = await response.json();\n\n        localStorage.setItem('userName', data.Data.Name);\n        localStorage.setItem('token', data.Data.Token);\n\n        const userName = localStorage.getItem('userName');\n        const token = localStorage.getItem('token');\n\n        console.log(\"Данные из памяти \" + token);\n\n        // window.location.href = './main.html';\n\n        const root = ReactDOM.createRoot(document.getElementById('root'));\n        root.render(<Main />);\n        reportWebVitals();\n\n      } else {\n        // Обрабатываем ошибку авторизации\n        const errorData = await response.json();\n        setError(errorData.error);\n\n        console.error('Ошибка авторизации:', errorData.Error);\n\n        alert('Произошла ошибка при авторизации\\n' + errorData.Error);\n\n      }\n\n      //Если возникла какая-либо ошибка при выполнении запроса,\n      // то мы выводим сообщение об оплате в консоль и включает значение ошибки состояния.\n    } catch (error) {\n      console.error('Ошибка авторизации:', error);\n      setError('Произошла ошибка при авторизации');\n\n      alert('Произошла ошибка при авторизации');\n    }\n  }\n\n\n  //Возвращаемые элементы JSX имеют формы input, button и div, которые имеют классы CSS.\n  // Обратите внимание, что значение каждого входа связано с соответствующим состоянием хуком.\n  // Если в состоянии хуке ошибка есть сообщение об этом, то мы выводим его на страницу.\n  return (\n    <form onSubmit={handleSubmit} className=\"container\">\n      <h3 className=\"text\">Авторизация</h3>\n      <input\n        className=\"inpu login\"\n        type=\"text\"\n        placeholder=\"Логин\"\n        value={username}\n        onChange={(event) => setUsername(event.target.value)}\n        required\n      />\n      <input\n        className=\"inpu password\"\n        type=\"password\"\n        placeholder=\"Пароль\"\n        value={password}\n        onChange={(event) => setPassword(event.target.value)}\n        required\n      />\n      <div className=\"button\">\n        <button type=\"submit\"\n        >Войти</button>\n      </div>\n      {error && <p className=\"error\">{error}</p>}\n    </form>\n  );\n}\n\nexport default LoginForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}