{"ast":null,"code":"var _jsxFileName = \"/Users/ymmirzayev/shookru/src/App.js\";\nimport './index.css';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport { useState } from 'react';\nimport { useMuttation } from 'react-qury';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  /*\n  //Здесь мы наблюдаем состояние хуков имени пользователя, пароля и ошибки, используя useState библиотеки из React.\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n   //Функция handleSubmit вызвался при отправке формы.\n  // Она сначала отменяет действие по умолчанию (обновление страницы) с помощью метода preventDefault().\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setError('');\n     //Затем мы отправляем запрос POST на указанный адрес, используя fetch.\n    // В телезапросе мы отправляем JSON, запрашиваем имя пользователя и пароль, которые были введены в форме.\n    try {\n      const response = await fetch('https://fp-services.ru/installment/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(\n          {\n          \"Login\": \"test\",\n          \"Password\": \"12345679\"\n      }\n  )\n      });\n       //Если ответ сервера содержит код 200, то авторизация прошла успешно и мы перешли на страницу \"sert.html\".\n      // В случае если мы обработаем сообщение об ошибке.\n      if (response.ok) {\n        // Авторизация прошла успешно, переходим на следующую страницу\n        window.location.href = './sert.html';\n      } else {\n        // Обрабатываем ошибку авторизации\n        const errorData = await response.json();\n        setError(errorData.error);\n      }\n       //Если возникла какая-либо ошибка при выполнении запроса,\n      // то мы выводим сообщение об оплате в консоль и включает значение ошибки состояния.\n    } catch (error) {\n      console.error('Ошибка авторизации:', error);\n      setError('Произошла ошибка при авторизации');\n    }\n  }\n    //Возвращаемые элементы JSX имеют формы input, button и div, которые имеют классы CSS.\n  // Обратите внимание, что значение каждого входа связано с соответствующим состоянием хуком.\n  // Если в состоянии хуке ошибка есть сообщение об этом, то мы выводим его на страницу.\n  return (\n    <form onSubmit={handleSubmit} className=\"container\">\n      <h3 className=\"text\">Авторизация</h3>\n      <input\n        className=\"input login\"\n        type=\"text\"\n        placeholder=\"Логин\"\n        value={username}\n        onChange={(event) => setUsername(event.target.value)}\n        required\n      />\n      <input\n        className=\"input password\"\n        type=\"password\"\n        placeholder=\"Пароль\"\n        value={password}\n        onChange={(event) => setPassword(event.target.value)}\n        required\n      />\n      <div className=\"button\">\n        <button type=\"submit\">Войти</button>\n      </div>\n      {error && <p className=\"error\">{error}</p>}\n    </form>\n  );\n  }\n  */\n  const API_URL = 'http://localhost:3000/api';\n  const [email, setEmail] = userState('');\n  const [password, setPassword] = userState('');\n  const {\n    mutate,\n    isLoading\n  } = userMutation('login', () => axios.post(`${API_URL}/auth/login`, {\n    email,\n    password\n  }, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }), {\n    onSuccss: {}\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-text\",\n        children: \"dsasd\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"login-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"email\",\n          required: true,\n          pattern: \"[a-z0-9._%+-]+@[a-z0-9.-]+\\\\. [a-z]{2,4]$\",\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"password\",\n          required: true,\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => mutate(),\n          disabled: isLoading,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 3\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["axios","logo","useState","useMuttation","jsxDEV","_jsxDEV","App","API_URL","email","setEmail","userState","password","setPassword","mutate","isLoading","userMutation","post","headers","onSuccss","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","required","pattern","value","onChange","e","target","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/ymmirzayev/shookru/src/App.js"],"sourcesContent":["\nimport './index.css';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport { useState } from 'react';\nimport {useMuttation} from 'react-qury'\n\n\n\nfunction App() {\n  /*\n  //Здесь мы наблюдаем состояние хуков имени пользователя, пароля и ошибки, используя useState библиотеки из React.\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  //Функция handleSubmit вызвался при отправке формы.\n  // Она сначала отменяет действие по умолчанию (обновление страницы) с помощью метода preventDefault().\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setError('');\n\n    //Затем мы отправляем запрос POST на указанный адрес, используя fetch.\n    // В телезапросе мы отправляем JSON, запрашиваем имя пользователя и пароль, которые были введены в форме.\n    try {\n      const response = await fetch('https://fp-services.ru/installment/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(\n          {\n          \"Login\": \"test\",\n          \"Password\": \"12345679\"\n      }\n)\n      });\n\n      //Если ответ сервера содержит код 200, то авторизация прошла успешно и мы перешли на страницу \"sert.html\".\n      // В случае если мы обработаем сообщение об ошибке.\n      if (response.ok) {\n        // Авторизация прошла успешно, переходим на следующую страницу\n        window.location.href = './sert.html';\n      } else {\n        // Обрабатываем ошибку авторизации\n        const errorData = await response.json();\n        setError(errorData.error);\n      }\n\n      //Если возникла какая-либо ошибка при выполнении запроса,\n      // то мы выводим сообщение об оплате в консоль и включает значение ошибки состояния.\n    } catch (error) {\n      console.error('Ошибка авторизации:', error);\n      setError('Произошла ошибка при авторизации');\n    }\n  }\n\n\n  //Возвращаемые элементы JSX имеют формы input, button и div, которые имеют классы CSS.\n  // Обратите внимание, что значение каждого входа связано с соответствующим состоянием хуком.\n  // Если в состоянии хуке ошибка есть сообщение об этом, то мы выводим его на страницу.\n  return (\n    <form onSubmit={handleSubmit} className=\"container\">\n      <h3 className=\"text\">Авторизация</h3>\n      <input\n        className=\"input login\"\n        type=\"text\"\n        placeholder=\"Логин\"\n        value={username}\n        onChange={(event) => setUsername(event.target.value)}\n        required\n      />\n      <input\n        className=\"input password\"\n        type=\"password\"\n        placeholder=\"Пароль\"\n        value={password}\n        onChange={(event) => setPassword(event.target.value)}\n        required\n      />\n      <div className=\"button\">\n        <button type=\"submit\">Войти</button>\n      </div>\n      {error && <p className=\"error\">{error}</p>}\n    </form>\n  );\n}\n\n*/\nconst API_URL ='http://localhost:3000/api'\n\nconst [email, setEmail] = userState('')\nconst [password, setPassword] = userState('')\n\nconst {mutate, isLoading} = userMutation(\n  'login',\n  () =>\n  axios.post(\n    `${API_URL}/auth/login`,\n    {email, password},\n    {headers: { 'Content-Type':\n    'application/json' },\n  }\n  ),\n  {\n    onSuccss: ({})\n  }\n\n  )\n\nreturn (\n  <div className='login'>\n    <div className='form'>\n      <span className='material-text'>\ndsasd\n      </span>\n      \n      <form className='login-form'>\n        <input\n        type=\"text\"\n        placeholder='email'\n        required\n        pattern='[a-z0-9._%+-]+@[a-z0-9.-]+\\.\n        [a-z]{2,4]$'\n        value={email}\n          onChange={e => setEmail(e.target.value)}\n          />\n\n        <input\n        type=\"password\"\n        placeholder='password'\n        required\n        value={password}\n          onChange={e => setPassword(e.target.value)}\n          />\n\n          <button onClick={() => mutate()}\n          disabled={isLoading}>Login</button>\n      </form>\n    </div>\n  </div>\n)\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}