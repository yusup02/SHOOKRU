{"ast":null,"code":"var _jsxFileName = \"/Users/ymmirzayev/shookru/src/App.js\",\n  _s = $RefreshSig$();\nimport './index.css';\nimport logo from './logo.svg';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginForm() {\n  _s();\n  //Здесь мы наблюдаем состояние хуков имени пользователя, пароля и ошибки, используя useState библиотеки из React.\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  //Функция handleSubmit вызвался при отправке формы.\n  // Она сначала отменяет действие по умолчанию (обновление страницы) с помощью метода preventDefault().\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setError('');\n\n    //Затем мы отправляем запрос POST на указанный адрес, используя fetch.\n    // В телезапросе мы отправляем JSON, запрашиваем имя пользователя и пароль, которые были введены в форме.\n    try {\n      const response = await fetch('https://fp-services.ru/installment/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Login: \"test\",\n          \"Password\": \"12345678\"\n        })\n      });\n\n      //Если ответ сервера содержит код 200, то авторизация прошла успешно и мы перешли на страницу \"sert.html\".\n      // В случае если мы обработаем сообщение об ошибке.\n      if (response.ok) {\n        // Авторизация прошла успешно, переходим на следующую страницу\n        window.location.href = './sert.html';\n      } else {\n        // Обрабатываем ошибку авторизации\n        const errorData = await response.json();\n        setError(errorData.error);\n      }\n\n      //Если возникла какая-либо ошибка при выполнении запроса,\n      // то мы выводим сообщение об оплате в консоль и включает значение ошибки состояния.\n    } catch (error) {\n      console.error('Ошибка авторизации:', error);\n      setError('Произошла ошибка при авторизации');\n      alert('Произошла ошибка при авторизации');\n    }\n  };\n\n  //Возвращаемые элементы JSX имеют формы input, button и div, которые имеют классы CSS.\n  // Обратите внимание, что значение каждого входа связано с соответствующим состоянием хуком.\n  // Если в состоянии хуке ошибка есть сообщение об этом, то мы выводим его на страницу.\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text\",\n      children: \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"inpu login\",\n      type: \"text\",\n      placeholder: \"\\u041B\\u043E\\u0433\\u0438\\u043D\",\n      value: username,\n      onChange: event => setUsername(event.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"inpu password\",\n      type: \"password\",\n      placeholder: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n      value: password,\n      onChange: event => setPassword(event.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"\\u0412\\u043E\\u0439\\u0442\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginForm, \"lABZ+K3zbnEaFQvlduiFXLNOf5A=\");\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["logo","useState","jsxDEV","_jsxDEV","LoginForm","_s","username","setUsername","password","setPassword","error","setError","handleSubmit","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","Login","ok","window","location","href","errorData","json","console","alert","onSubmit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["/Users/ymmirzayev/shookru/src/App.js"],"sourcesContent":["\nimport './index.css';\nimport logo from './logo.svg';\nimport { useState } from 'react';\n\n\n\nfunction LoginForm() {\n\n  //Здесь мы наблюдаем состояние хуков имени пользователя, пароля и ошибки, используя useState библиотеки из React.\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  //Функция handleSubmit вызвался при отправке формы.\n  // Она сначала отменяет действие по умолчанию (обновление страницы) с помощью метода preventDefault().\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setError('');\n\n    //Затем мы отправляем запрос POST на указанный адрес, используя fetch.\n    // В телезапросе мы отправляем JSON, запрашиваем имя пользователя и пароль, которые были введены в форме.\n    try {\n      const response = await fetch('https://fp-services.ru/installment/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(\n          {\n          Login: \"test\",\n          \"Password\": \"12345678\"\n      }\n)\n      });\n\n      //Если ответ сервера содержит код 200, то авторизация прошла успешно и мы перешли на страницу \"sert.html\".\n      // В случае если мы обработаем сообщение об ошибке.\n      if (response.ok) {\n        // Авторизация прошла успешно, переходим на следующую страницу\n        window.location.href = './sert.html';\n      } else {\n        // Обрабатываем ошибку авторизации\n        const errorData = await response.json();\n        setError(errorData.error);\n      }\n\n      //Если возникла какая-либо ошибка при выполнении запроса,\n      // то мы выводим сообщение об оплате в консоль и включает значение ошибки состояния.\n    } catch (error) {\n      console.error('Ошибка авторизации:', error);\n      setError('Произошла ошибка при авторизации');\n\n      alert('Произошла ошибка при авторизации');\n    }\n  }\n\n\n  //Возвращаемые элементы JSX имеют формы input, button и div, которые имеют классы CSS.\n  // Обратите внимание, что значение каждого входа связано с соответствующим состоянием хуком.\n  // Если в состоянии хуке ошибка есть сообщение об этом, то мы выводим его на страницу.\n  return (\n    <form onSubmit={handleSubmit} className=\"container\">\n      <h3 className=\"text\">Авторизация</h3>\n      <input\n        className=\"inpu login\"\n        type=\"text\"\n        placeholder=\"Логин\"\n        value={username}\n        onChange={(event) => setUsername(event.target.value)}\n        required\n      />\n      <input\n        className=\"inpu password\"\n        type=\"password\"\n        placeholder=\"Пароль\"\n        value={password}\n        onChange={(event) => setPassword(event.target.value)}\n        required\n      />\n      <div className=\"button\">\n        <button type=\"submit\"\n        >Войти</button>\n      </div>\n      {error && <p className=\"error\">{error}</p>}\n    </form>\n  );\n}\n\nexport default LoginForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}